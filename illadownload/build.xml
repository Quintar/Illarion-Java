<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ This file is part of the Illarion Download Utility.
  ~
  ~ Copyright Â© 2012 - Illarion e.V.
  ~
  ~ The Illarion Download Utility is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ The Illarion Download Utility is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with the Illarion Download Utility.  If not, see <http://www.gnu.org/licenses/>.
  -->
<project name="Illarion Download System" default="build_download" basedir=".">
    <description>
        Build the illarion downloader/updater/launcher. This is the replacement
        for the Java Webstart deployment system.
    </description>

    <import file="../illacommon/build_include.xml"/>

    <!-- set global properties for this build -->
    <property name="src" location="${download}/src"/>
    <property name="classes" location="${download}/antclasses"/>
    <property name="jar" location="${download}/${download.jar}"/>
    <property name="client_jar" location="${download}/client_${download.jar}"/>
    <property name="download_jar" location="${download}/download_${download.jar}"/>
    <property name="easynpc_jar" location="${download}/easynpc_${download.jar}"/>
    <property name="easyquest_jar" location="${download}/easyquest_${download.jar}"/>
    <property name="mapedit_jar" location="${download}/mapedit_${download.jar}"/>
    <property name="org.jar" location="${download}/org_${download.jar}"/>

    <target name="build_download" description="Build the download jar"
            depends="check_optional_dirs, init, buildTasks, compile_download, build_jar"
            if="keys.exist">
        <move file="${jar}" tofile="${download.bin}"/>
        <move file="${client_jar}" tofile="${compiled}/client_${download.jar}"/>
        <move file="${download_jar}" tofile="${compiled}/download_${download.jar}"/>
        <move file="${easynpc_jar}" tofile="${compiled}/easynpc_${download.jar}"/>
        <move file="${easyquest_jar}" tofile="${compiled}/easyquest_${download.jar}"/>
        <move file="${mapedit_jar}" tofile="${compiled}/mapedit_${download.jar}"/>

        <resourceprepare targetdir="${signedcompiled}" usepack200="true">
            <filelist dir="${compiled}">
                <file name="${download.jar}"/>
            </filelist>
        </resourceprepare>

        <copy todir="${signedcompiled}">
            <fileset dir="${compiled}">
                <include name="*_${download.jar}"/>
            </fileset>
        </copy>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedcompiled}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedcompiled}">
                    <include name="${download.jar}"/>
                    <include name="*_${download.jar}"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedcompiled}">
                    <include name="${download.jar}"/>
                    <include name="*_${download.jar}"/>
                </fileset>
            </path>
        </verifyjar>

        <copy todir="${setup}">
            <fileset dir="${signedcompiled}">
                <include name="${download.jar}"/>
                <include name="*_${download.jar}"/>
            </fileset>
        </copy>

        <pack200 srcfile="${download.deploy}" destdir="${setup}"/>
    </target>

    <target name="compile_download">
        <!-- Compile the java code from ${src} into ${build} -->
        <delete dir="${classes}"/>
        <mkdir dir="${classes}"/>
        <javac srcdir="${src}" destdir="${classes}" excludes="**/test/*" source="${source.version}"
               target="${target.version}" encoding="${source.encoding}" compiler="${build.compiler}"
               debug="${build.debug}" debuglevel="${build.debuglevel}">
            <classpath>
                <fileset refid="xz"/>
                <fileset refid="swingx"/>
                <fileset refid="log4j"/>
                <fileset refid="jsr"/>
                <pathelement path="${common.bin}"/>
                <pathelement path="${java.home}/lib"/>
            </classpath>
        </javac>
    </target>

    <target name="build_jar" depends="proguard">
        <jar jarfile="${jar}" basedir="${classes}" includes="illarion/download/**">
            <fileset dir="${classes}">
                <include name="illarion/download/**"/>
            </fileset>
            <zipgroupfileset refid="swingx"/>
            <zipgroupfileset refid="xz"/>
            <zipgroupfileset refid="log4j"/>
            <zipgroupfileset refid="eventbus"/>
            <zipgroupfileset refid="jsr"/>
            <zipfileset src="${common.bin}"/>
            <metainf dir="${download}">
                <include name="*.txt"/>
            </metainf>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="${download.vendor}"/>
                <attribute name="Implementation-Title" value="${download.name}"/>
                <attribute name="Implementation-Version" value="${download.version}"/>
                <attribute name="Main-Class" value="illarion.download.install.Installation"/>
            </manifest>
        </jar>

        <jar jarfile="${jar}" basedir="${src}" includes="*.png" update="true"/>
        <jar jarfile="${jar}" basedir="${src}" includes="logging.properties" update="true"/>
        <jar jarfile="${jar}" basedir="${src}" includes="messages_de.properties messages_en.properties" update="true"/>

        <mkdir dir="${download}/tmp"/>
        <proguard preverify="true" skipnonpubliclibraryclasses="false"
                  skipnonpubliclibraryclassmembers="false"
                  mergeinterfacesaggressively="true"
                  obfuscate="false"
                  optimizationpasses="4"
                  optimize="false"
                  allowaccessmodification="true"
                  overloadaggressively="true"
                  shrink="true"
                  usemixedcaseclassnames="true"
                  target="${target.version}"
                  printmapping="${download}/mapping.txt">

            <injar file="${jar}"/>
            <outjar file="${download}/tmp"/>
            <libraryjar refid="javolution"/>
            <libraryjar refid="trove"/>
            <libraryjar refid="swt"/>
            <libraryjar refid="nifty"/>
            <libraryjar refid="slick"/>
            <libraryjar refid="tabsplitter"/>
            <libraryjar refid="mantisconnect"/>
            <libraryjar path="${java.home}/lib/rt.jar"/>
            <libraryjar path="${java.home}/lib/jce.jar"/>
            <keep name="org.apache.log4j.ConsoleAppender"/>
            <keep name="org.apache.log4j.PatternLayout"/>
            <keep extends="javax.swing.plaf.ComponentUI"/>
            <keepclassmembers name="org.apache.log4j.PatternLayout">
                <method name="setConversionPattern" type="void" parameters="java.lang.String"/>
                <method name="getConversionPattern" type="java.lang.String" parameters="void"/>
            </keepclassmembers>
            <keepclasseswithmembers name="illarion.download.install.Installation">
                <method access="public static" type="void" name="main" parameters="java.lang.String[]"/>
            </keepclasseswithmembers>
            <keepclasseswithmembers>
                <method name="getMnemonic" type="int" parameters=""/>
                <method name="createUI" type="javax.swing.plaf.ComponentUI" parameters="javax.swing.JComponent"/>
                <method name="getBackgroundPainter" type="org.jdesktop.swingx.painter.Painter" parameters=""/>
                <method name="setBackgroundPainter" type="void" parameters="org.jdesktop.swingx.painter.Painter"/>
                <method name="displayPropertiesToCSS" type="java.lang.String"
                        parameters="java.awt.Font,java.awt.Color"/>
                <method name="loadActionMap" type="void"
                        parameters="org.jdesktop.swingx.plaf.basic.core.LazyActionMap"/>
            </keepclasseswithmembers>
            <dontwarn name="javax.mail.**"/>
            <dontwarn name="javax.jms.**"/>
            <dontwarn name="de.lessvoid.nifty.**"/>
            <dontnote name="org.apache.log4j.jmx.Agent"/>
            <dontnote name="org.apache.log4j.net.ZeroConfSupport"/>
            <dontnote name="org.apache.log4j.spi.LocationInfo"/>
            <dontnote name="org.apache.commons.logging.*"/>
        </proguard>

        <move file="${jar}" tofile="${org.jar}"/>
        <move file="${download}/tmp/${download.jar}" tofile="${jar}"/>
        <delete dir="${download}/tmp"/>

        <antcall target="createSignJarsRelease" inheritall="true"/>
        <antcall target="createSignJarsDevelopment" inheritall="true"/>
    </target>

    <target name="createSignJarsRelease" if="release.build">
        <property name="jnlp.directory" location="${download}/release"/>
        <property name="jnlp.default" value="JNLP-INF/APPLICATION.JNLP"/>
        <property name="jnlp.default.file" location="${jnlp.directory}/${jnlp.default}"/>

        <delete file="${jnlp.default.file}" failonerror="false"/>
        <copy file="${jnlp.directory}/JNLP-INF/illarion_client.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${client_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_download.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${download_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_easynpc.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${easynpc_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_easyquest.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${easyquest_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_mapedit.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${mapedit_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>
    </target>

    <target name="createSignJarsDevelopment" unless="release.build">
        <property name="jnlp.directory" location="${download}/dev"/>
        <property name="jnlp.default" value="JNLP-INF/APPLICATION.JNLP"/>
        <property name="jnlp.default.file" location="${jnlp.directory}/${jnlp.default}"/>

        <delete file="${jnlp.default.file}" failonerror="false"/>
        <copy file="${jnlp.directory}/JNLP-INF/illarion_client.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${client_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_download.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${download_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_easynpc.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${easynpc_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_easyquest.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${easyquest_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>

        <copy file="${jnlp.directory}/JNLP-INF/illarion_mapedit.jnlp" tofile="${jnlp.default.file}"/>
        <jar jarfile="${mapedit_jar}" basedir="${jnlp.directory}" includes="${jnlp.default}" compress="false"/>
        <delete file="${jnlp.default.file}" failonerror="false"/>
    </target>
</project>
